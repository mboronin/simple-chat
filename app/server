import asyncio
from asyncio import transports
from typing import Optional


class ServerProtocol(asyncio.Protocol):
    login: str = None
    server: 'Server'
    transport : transports.Transport

    def __init__(self, server: 'Server'):
        self.server = server

    def data_received(self, data: bytes) -> None:
        decoded = data.decode()
        if self.login is None:
            self.send_message(decoded)
        else:
            if decoded.startswith("login:"):
                self.login = decoded.replace("login:", "").replace("\r\n", "")
                self.transport.write("Привет, {self.login}!\n".encode())
            else:
                self.transport.write("Login incorrect".encode())

    def connection_made(self, transport: transports.BaseTransport) -> None:
        self.server.clients.append(self)
        self.transport = transport
        print("New client {self}")

    def connection_lost(self, exc: Optional[Exception]) -> None:
        super().connection_lost(exc)

    def send_message(self, content: str):
        message = f"{self.login}: {content}"

        for user in self.server.clients:
            user.transport.write(message.encode())

class Server:
    clients: list

    def __init__(self):
        self.clients = []

    def build_protocol(self):
        return ServerProtocol(self)

    async def start(self):
        loop = asyncio.get_event_loop()
        coroutine = await loop.create_server(
            self.build_protocol,
            '127.0.0.1',
            8081
        )
        print("Server has started")
        await coroutine.serve_forever()

process = Server()
try:
    asyncio.run(process.start())
except KeyboardInterrupt:
    print("Stopped manually")
except Exception:
    print("Something went wrong")